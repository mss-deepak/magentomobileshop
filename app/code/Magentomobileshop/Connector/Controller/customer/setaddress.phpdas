<?php
namespace Magentomobileshop\Connector\Controller\customer;


class setaddress extends \Magento\Framework\App\Action\Action
{

    public function __construct(\Magento\Framework\App\Action\Context $context,
                                \Magento\Customer\Model\AddressFactory $addressFactory,
                                \Magento\Store\Model\StoreManagerInterface $storeManager,
                                \Magentomobileshop\Connector\Helper\Data  $customHelper
                                )
        {
          $this->addressFactory = $addressFactory;
          $this->storeManager = $storeManager;
          $this->customHelper = $customHelper;
          parent::__construct($context);
        }

    public function execute()
    { 
        $this->customHelper->loadParent($this->getRequest()->getHeader('token'));
        $this->setAddressApi();

    }


    protected function setAddressApi()
    {       
        try {
            $userid = Mage::app ()->getRequest ()->getParam ( 'userid' );
            if($userid){
                $customerId = $userid;
                $params = Mage::app ()->getRequest ()->getParam('data');
                $respnse = json_decode($params,1);
                $new_array = array();
              foreach ($respnse as $key => $datas) {
                    $tempData = str_replace("\\", "",$datas);
                    $data = json_decode($tempData,true);
                if (!\Zend_Validate::is($data['firstname'], 'NotEmpty')):
                    echo json_encode(array('status'=>'error','message'=> __('Firstname should not be empty')));
                        exit;
                endif;
                if (!\Zend_Validate::is($data['lastname'], 'NotEmpty')):
                    echo json_encode(array('status'=>'error','message'=> __('Lastname should not be empty')));
                        exit;
                endif;
                if (!\Zend_Validate::is($data['street'], 'NotEmpty')):
                    echo json_encode(array('status'=>'error','message'=> __('Street should not be empty')));
                        exit;
                endif;
                if (!\Zend_Validate::is($data['city'], 'NotEmpty')):
                    echo json_encode(array('status'=>'error','message'=> __('City should not be empty')));
                        exit;
                endif;
                if (!\Zend_Validate::is($data['country_id'], 'NotEmpty') || $data['country_id'] == 'undefined'):
                    echo json_encode(array('status'=>'error','message'=> __('Country_id should not be empty')));
                        exit;
                endif;
                if (!\Zend_Validate::is($data['telephone'], 'NotEmpty')):
                    echo json_encode(array('status'=>'error','message'=> __('Telephone should not be empty')));
                        exit;
                endif;
                
                if($data['firstname']==null):
                    echo json_encode ( array (
                        'status' => 'error',
                        'message' => __('please enter the firstname,')));
                endif;
      



                
           $addresss = $this->addressFactory;
            $address = $addresss->create();
            $address->setCustomerId($customerId)
            ->setFirstname($data['firstname'])
            ->setLastname($data['lastname'])
            ->setCountryId($data['country_id'])
            ->setPostcode($data['postcode'])
            ->setCity($data['city'])
            ->setTelephone($data['telephone'])
            ->setFax('0038511223355')
            ->setCompany('Master')
            ->setRegion($data['region_id'])
            ->setStreet($data['street'])
            ->setIsDefaultBilling($data['is_default_billing'])
            ->setIsDefaultShipping($data['is_default_shipping'])
            ->setSaveInAddressBook('1');
                try{
                    $address->save();
                   $new_array[] =$address->getId();
                }
                catch (\Exception $e) {
                    
                    echo json_encode ( array (
                        'status' => 'error',
                        'message' => __($e->getMessage())
                ) );
                }
        }       

                    $result['id']=$new_array;
                    $result['message']= __('Address added successfully.');
                    $result['status']='success';
                  
                       echo json_encode($result);
            }
            else{

                echo json_encode ( array (
                        'status' => 'error',
                        'message' => __('No matched email data.') 
                ) );
            }
        
        } catch (\Exception $e) {


            echo json_encode ( array (
                        'status' => 'error',
                        'message' => "something went wrong" 
                ) );
        }
    }
}


/*  try {
            $userid = $this->getRequest ()->getParam ( 'userid' );
            if($userid){
                $customerId = $userid;
                $values= $this->getRequest()->getParams();
             $addresss = $this->addressFactory;
            $address = $addresss->create();
            $address->setCustomerId($customerId)
            ->setFirstname($values['firstname'])
            ->setLastname($values['lastname'])
            ->setCountryId($values['country_id'])
            ->setPostcode($values['postcode'])
            ->setCity($values['city'])
            ->setTelephone($values['telephone'])
            ->setFax('0038511223355')
            ->setCompany('Master')
            ->setStreet($values['street'])
            ->setIsDefaultBilling('1')
            ->setIsDefaultShipping('1')
            ->setSaveInAddressBook('1');
                try{
                    $address->save();
                  
                   // $result['id']=$addresss->getData('id');
                    $result['message']= ('Address added successfully.');
                    $result['status']='success';
                    echo json_encode(array('result'=>$result));
                }
                catch (\Exception $e) {
                    
                    echo json_encode ( array (
                        'status' => 'error',
                        'message' => $e->getmessage()
                ) );
                }

 
                
            }
            else{

                echo json_encode ( array (
                        'status' => 'error',
                        'message' => '(No matched email data.'
                ) );
            }
        
        } catch (\Exception $e) {


            echo json_encode ( array (
                        'status' => 'error',
                        'message' => $e->getmessage() 
                ) );
            

        }
    }*/